const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Facebook Downloader
app.get('/api/fb', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://getmyfb.com/process?url=${encodeURIComponent(url)}`);
        const $ = cheerio.load(response.data);
        
        const hdUrl = $('a:contains("Download HD")').attr('href');
        const sdUrl = $('a:contains("Download SD")').attr('href');

        res.json({
            status: true,
            data: {
                hd: hdUrl,
                sd: sdUrl
            }
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// TikTok Downloader
app.get('/api/tiktok', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://snaptik.app/en?url=${encodeURIComponent(url)}`);
        const $ = cheerio.load(response.data);
        
        const downloadUrl = $('a.download-file').attr('href');
        const audioUrl = $('a.download-music').attr('href');

        res.json({
            status: true,
            data: {
                wm: downloadUrl,
                no_wm: downloadUrl.replace('watermark=1', 'watermark=0'),
                audio: audioUrl
            }
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Twitter Downloader
app.get('/api/twitter', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://twitsave.com/info?url=${encodeURIComponent(url)}`);
        const $ = cheerio.load(response.data);
        
        const hdUrl = $('a:contains("Download HD")').attr('href');
        const sdUrl = $('a:contains("Download SD")').attr('href');
        const audioUrl = $('a:contains("Download Audio")').attr('href');

        res.json({
            status: true,
            data: {
                HD: hdUrl,
                SD: sdUrl,
                audio: audioUrl
            }
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Google Drive Downloader
app.get('/api/gdrive', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://gdurl.pro/api/gdrive?url=${encodeURIComponent(url)}`);
        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Mediafire Downloader
app.get('/api/mediafire', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://gdurl.pro/api/mediafire?url=${encodeURIComponent(url)}`);
        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Instagram Downloader
app.get('/api/instagram', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).json({ error: 'URL is required' });

        const response = await axios.get(`https://igram.io/api/ig?url=${encodeURIComponent(url)}`);
        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Base URL
app.get('/api', (req, res) => {
    res.json({
        api: `http://localhost:${PORT}/api`,
        status: true,
        message: "SILENT-SOBX-MD API Service"
    });
});

app.listen(PORT, () => {
    console.log(`API server running on port ${PORT}`);
});
